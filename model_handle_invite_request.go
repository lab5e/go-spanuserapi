/*
The Span User API

API for sessions, teams and API tokens

API version: [version] [name]
Contact: contact@lab5e.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package spanuserapi

import (
	"encoding/json"
)

// checks if the HandleInviteRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &HandleInviteRequest{}

// HandleInviteRequest struct for HandleInviteRequest
type HandleInviteRequest struct {
	Accepted *bool `json:"accepted,omitempty"`
}

// NewHandleInviteRequest instantiates a new HandleInviteRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewHandleInviteRequest() *HandleInviteRequest {
	this := HandleInviteRequest{}
	return &this
}

// NewHandleInviteRequestWithDefaults instantiates a new HandleInviteRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewHandleInviteRequestWithDefaults() *HandleInviteRequest {
	this := HandleInviteRequest{}
	return &this
}

// GetAccepted returns the Accepted field value if set, zero value otherwise.
func (o *HandleInviteRequest) GetAccepted() bool {
	if o == nil || IsNil(o.Accepted) {
		var ret bool
		return ret
	}
	return *o.Accepted
}

// GetAcceptedOk returns a tuple with the Accepted field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HandleInviteRequest) GetAcceptedOk() (*bool, bool) {
	if o == nil || IsNil(o.Accepted) {
		return nil, false
	}
	return o.Accepted, true
}

// HasAccepted returns a boolean if a field has been set.
func (o *HandleInviteRequest) HasAccepted() bool {
	if o != nil && !IsNil(o.Accepted) {
		return true
	}

	return false
}

// SetAccepted gets a reference to the given bool and assigns it to the Accepted field.
func (o *HandleInviteRequest) SetAccepted(v bool) {
	o.Accepted = &v
}

func (o HandleInviteRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o HandleInviteRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Accepted) {
		toSerialize["accepted"] = o.Accepted
	}
	return toSerialize, nil
}

type NullableHandleInviteRequest struct {
	value *HandleInviteRequest
	isSet bool
}

func (v NullableHandleInviteRequest) Get() *HandleInviteRequest {
	return v.value
}

func (v *NullableHandleInviteRequest) Set(val *HandleInviteRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableHandleInviteRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableHandleInviteRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableHandleInviteRequest(val *HandleInviteRequest) *NullableHandleInviteRequest {
	return &NullableHandleInviteRequest{value: val, isSet: true}
}

func (v NullableHandleInviteRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableHandleInviteRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


