/*
The Span User API

API for sessions, teams and API tokens

API version: [version] [name]
Contact: contact@lab5e.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package spanuserapi

import (
	"encoding/json"
)

// checks if the UpdatePasswordRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UpdatePasswordRequest{}

// UpdatePasswordRequest struct for UpdatePasswordRequest
type UpdatePasswordRequest struct {
	ExistingPassword *string `json:"existingPassword,omitempty"`
	NewPassword *string `json:"newPassword,omitempty"`
	Passcode *string `json:"passcode,omitempty"`
}

// NewUpdatePasswordRequest instantiates a new UpdatePasswordRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUpdatePasswordRequest() *UpdatePasswordRequest {
	this := UpdatePasswordRequest{}
	return &this
}

// NewUpdatePasswordRequestWithDefaults instantiates a new UpdatePasswordRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUpdatePasswordRequestWithDefaults() *UpdatePasswordRequest {
	this := UpdatePasswordRequest{}
	return &this
}

// GetExistingPassword returns the ExistingPassword field value if set, zero value otherwise.
func (o *UpdatePasswordRequest) GetExistingPassword() string {
	if o == nil || IsNil(o.ExistingPassword) {
		var ret string
		return ret
	}
	return *o.ExistingPassword
}

// GetExistingPasswordOk returns a tuple with the ExistingPassword field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdatePasswordRequest) GetExistingPasswordOk() (*string, bool) {
	if o == nil || IsNil(o.ExistingPassword) {
		return nil, false
	}
	return o.ExistingPassword, true
}

// HasExistingPassword returns a boolean if a field has been set.
func (o *UpdatePasswordRequest) HasExistingPassword() bool {
	if o != nil && !IsNil(o.ExistingPassword) {
		return true
	}

	return false
}

// SetExistingPassword gets a reference to the given string and assigns it to the ExistingPassword field.
func (o *UpdatePasswordRequest) SetExistingPassword(v string) {
	o.ExistingPassword = &v
}

// GetNewPassword returns the NewPassword field value if set, zero value otherwise.
func (o *UpdatePasswordRequest) GetNewPassword() string {
	if o == nil || IsNil(o.NewPassword) {
		var ret string
		return ret
	}
	return *o.NewPassword
}

// GetNewPasswordOk returns a tuple with the NewPassword field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdatePasswordRequest) GetNewPasswordOk() (*string, bool) {
	if o == nil || IsNil(o.NewPassword) {
		return nil, false
	}
	return o.NewPassword, true
}

// HasNewPassword returns a boolean if a field has been set.
func (o *UpdatePasswordRequest) HasNewPassword() bool {
	if o != nil && !IsNil(o.NewPassword) {
		return true
	}

	return false
}

// SetNewPassword gets a reference to the given string and assigns it to the NewPassword field.
func (o *UpdatePasswordRequest) SetNewPassword(v string) {
	o.NewPassword = &v
}

// GetPasscode returns the Passcode field value if set, zero value otherwise.
func (o *UpdatePasswordRequest) GetPasscode() string {
	if o == nil || IsNil(o.Passcode) {
		var ret string
		return ret
	}
	return *o.Passcode
}

// GetPasscodeOk returns a tuple with the Passcode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdatePasswordRequest) GetPasscodeOk() (*string, bool) {
	if o == nil || IsNil(o.Passcode) {
		return nil, false
	}
	return o.Passcode, true
}

// HasPasscode returns a boolean if a field has been set.
func (o *UpdatePasswordRequest) HasPasscode() bool {
	if o != nil && !IsNil(o.Passcode) {
		return true
	}

	return false
}

// SetPasscode gets a reference to the given string and assigns it to the Passcode field.
func (o *UpdatePasswordRequest) SetPasscode(v string) {
	o.Passcode = &v
}

func (o UpdatePasswordRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UpdatePasswordRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ExistingPassword) {
		toSerialize["existingPassword"] = o.ExistingPassword
	}
	if !IsNil(o.NewPassword) {
		toSerialize["newPassword"] = o.NewPassword
	}
	if !IsNil(o.Passcode) {
		toSerialize["passcode"] = o.Passcode
	}
	return toSerialize, nil
}

type NullableUpdatePasswordRequest struct {
	value *UpdatePasswordRequest
	isSet bool
}

func (v NullableUpdatePasswordRequest) Get() *UpdatePasswordRequest {
	return v.value
}

func (v *NullableUpdatePasswordRequest) Set(val *UpdatePasswordRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableUpdatePasswordRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableUpdatePasswordRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUpdatePasswordRequest(val *UpdatePasswordRequest) *NullableUpdatePasswordRequest {
	return &NullableUpdatePasswordRequest{value: val, isSet: true}
}

func (v NullableUpdatePasswordRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUpdatePasswordRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


