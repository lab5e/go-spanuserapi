/*
The Span User API

API for sessions, teams and API tokens

API version: [version] [name]
Contact: contact@lab5e.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package spanuserapi

import (
	"encoding/json"
)

// checks if the Organisation type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Organisation{}

// Organisation An organisation is typically your business or a bigger team working on a larger project with related activities.
type Organisation struct {
	OrganisationId *string `json:"organisationId,omitempty"`
	Name *string `json:"name,omitempty"`
	Created *string `json:"created,omitempty"`
	Personal *bool `json:"personal,omitempty"`
	Stats *OrgStats `json:"stats,omitempty"`
}

// NewOrganisation instantiates a new Organisation object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewOrganisation() *Organisation {
	this := Organisation{}
	return &this
}

// NewOrganisationWithDefaults instantiates a new Organisation object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOrganisationWithDefaults() *Organisation {
	this := Organisation{}
	return &this
}

// GetOrganisationId returns the OrganisationId field value if set, zero value otherwise.
func (o *Organisation) GetOrganisationId() string {
	if o == nil || IsNil(o.OrganisationId) {
		var ret string
		return ret
	}
	return *o.OrganisationId
}

// GetOrganisationIdOk returns a tuple with the OrganisationId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Organisation) GetOrganisationIdOk() (*string, bool) {
	if o == nil || IsNil(o.OrganisationId) {
		return nil, false
	}
	return o.OrganisationId, true
}

// HasOrganisationId returns a boolean if a field has been set.
func (o *Organisation) HasOrganisationId() bool {
	if o != nil && !IsNil(o.OrganisationId) {
		return true
	}

	return false
}

// SetOrganisationId gets a reference to the given string and assigns it to the OrganisationId field.
func (o *Organisation) SetOrganisationId(v string) {
	o.OrganisationId = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *Organisation) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Organisation) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *Organisation) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *Organisation) SetName(v string) {
	o.Name = &v
}

// GetCreated returns the Created field value if set, zero value otherwise.
func (o *Organisation) GetCreated() string {
	if o == nil || IsNil(o.Created) {
		var ret string
		return ret
	}
	return *o.Created
}

// GetCreatedOk returns a tuple with the Created field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Organisation) GetCreatedOk() (*string, bool) {
	if o == nil || IsNil(o.Created) {
		return nil, false
	}
	return o.Created, true
}

// HasCreated returns a boolean if a field has been set.
func (o *Organisation) HasCreated() bool {
	if o != nil && !IsNil(o.Created) {
		return true
	}

	return false
}

// SetCreated gets a reference to the given string and assigns it to the Created field.
func (o *Organisation) SetCreated(v string) {
	o.Created = &v
}

// GetPersonal returns the Personal field value if set, zero value otherwise.
func (o *Organisation) GetPersonal() bool {
	if o == nil || IsNil(o.Personal) {
		var ret bool
		return ret
	}
	return *o.Personal
}

// GetPersonalOk returns a tuple with the Personal field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Organisation) GetPersonalOk() (*bool, bool) {
	if o == nil || IsNil(o.Personal) {
		return nil, false
	}
	return o.Personal, true
}

// HasPersonal returns a boolean if a field has been set.
func (o *Organisation) HasPersonal() bool {
	if o != nil && !IsNil(o.Personal) {
		return true
	}

	return false
}

// SetPersonal gets a reference to the given bool and assigns it to the Personal field.
func (o *Organisation) SetPersonal(v bool) {
	o.Personal = &v
}

// GetStats returns the Stats field value if set, zero value otherwise.
func (o *Organisation) GetStats() OrgStats {
	if o == nil || IsNil(o.Stats) {
		var ret OrgStats
		return ret
	}
	return *o.Stats
}

// GetStatsOk returns a tuple with the Stats field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Organisation) GetStatsOk() (*OrgStats, bool) {
	if o == nil || IsNil(o.Stats) {
		return nil, false
	}
	return o.Stats, true
}

// HasStats returns a boolean if a field has been set.
func (o *Organisation) HasStats() bool {
	if o != nil && !IsNil(o.Stats) {
		return true
	}

	return false
}

// SetStats gets a reference to the given OrgStats and assigns it to the Stats field.
func (o *Organisation) SetStats(v OrgStats) {
	o.Stats = &v
}

func (o Organisation) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Organisation) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.OrganisationId) {
		toSerialize["organisationId"] = o.OrganisationId
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Created) {
		toSerialize["created"] = o.Created
	}
	if !IsNil(o.Personal) {
		toSerialize["personal"] = o.Personal
	}
	if !IsNil(o.Stats) {
		toSerialize["stats"] = o.Stats
	}
	return toSerialize, nil
}

type NullableOrganisation struct {
	value *Organisation
	isSet bool
}

func (v NullableOrganisation) Get() *Organisation {
	return v.value
}

func (v *NullableOrganisation) Set(val *Organisation) {
	v.value = val
	v.isSet = true
}

func (v NullableOrganisation) IsSet() bool {
	return v.isSet
}

func (v *NullableOrganisation) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOrganisation(val *Organisation) *NullableOrganisation {
	return &NullableOrganisation{value: val, isSet: true}
}

func (v NullableOrganisation) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOrganisation) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


