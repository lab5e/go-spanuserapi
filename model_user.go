/*
The Span User API

API for sessions, teams and API tokens

API version: [version] [name]
Contact: contact@lab5e.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package spanuserapi

import (
	"encoding/json"
)

// checks if the User type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &User{}

// User struct for User
type User struct {
	Email *string `json:"email,omitempty"`
	Name *string `json:"name,omitempty"`
	Address *string `json:"address,omitempty"`
	Phone *string `json:"phone,omitempty"`
	HasMfa *bool `json:"hasMfa,omitempty"`
	LastEulaAccepted *int32 `json:"lastEulaAccepted,omitempty"`
	VerifiedPhone *bool `json:"verifiedPhone,omitempty"`
	DefaultTeamId *string `json:"defaultTeamId,omitempty"`
}

// NewUser instantiates a new User object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUser() *User {
	this := User{}
	return &this
}

// NewUserWithDefaults instantiates a new User object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUserWithDefaults() *User {
	this := User{}
	return &this
}

// GetEmail returns the Email field value if set, zero value otherwise.
func (o *User) GetEmail() string {
	if o == nil || IsNil(o.Email) {
		var ret string
		return ret
	}
	return *o.Email
}

// GetEmailOk returns a tuple with the Email field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *User) GetEmailOk() (*string, bool) {
	if o == nil || IsNil(o.Email) {
		return nil, false
	}
	return o.Email, true
}

// HasEmail returns a boolean if a field has been set.
func (o *User) HasEmail() bool {
	if o != nil && !IsNil(o.Email) {
		return true
	}

	return false
}

// SetEmail gets a reference to the given string and assigns it to the Email field.
func (o *User) SetEmail(v string) {
	o.Email = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *User) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *User) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *User) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *User) SetName(v string) {
	o.Name = &v
}

// GetAddress returns the Address field value if set, zero value otherwise.
func (o *User) GetAddress() string {
	if o == nil || IsNil(o.Address) {
		var ret string
		return ret
	}
	return *o.Address
}

// GetAddressOk returns a tuple with the Address field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *User) GetAddressOk() (*string, bool) {
	if o == nil || IsNil(o.Address) {
		return nil, false
	}
	return o.Address, true
}

// HasAddress returns a boolean if a field has been set.
func (o *User) HasAddress() bool {
	if o != nil && !IsNil(o.Address) {
		return true
	}

	return false
}

// SetAddress gets a reference to the given string and assigns it to the Address field.
func (o *User) SetAddress(v string) {
	o.Address = &v
}

// GetPhone returns the Phone field value if set, zero value otherwise.
func (o *User) GetPhone() string {
	if o == nil || IsNil(o.Phone) {
		var ret string
		return ret
	}
	return *o.Phone
}

// GetPhoneOk returns a tuple with the Phone field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *User) GetPhoneOk() (*string, bool) {
	if o == nil || IsNil(o.Phone) {
		return nil, false
	}
	return o.Phone, true
}

// HasPhone returns a boolean if a field has been set.
func (o *User) HasPhone() bool {
	if o != nil && !IsNil(o.Phone) {
		return true
	}

	return false
}

// SetPhone gets a reference to the given string and assigns it to the Phone field.
func (o *User) SetPhone(v string) {
	o.Phone = &v
}

// GetHasMfa returns the HasMfa field value if set, zero value otherwise.
func (o *User) GetHasMfa() bool {
	if o == nil || IsNil(o.HasMfa) {
		var ret bool
		return ret
	}
	return *o.HasMfa
}

// GetHasMfaOk returns a tuple with the HasMfa field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *User) GetHasMfaOk() (*bool, bool) {
	if o == nil || IsNil(o.HasMfa) {
		return nil, false
	}
	return o.HasMfa, true
}

// HasHasMfa returns a boolean if a field has been set.
func (o *User) HasHasMfa() bool {
	if o != nil && !IsNil(o.HasMfa) {
		return true
	}

	return false
}

// SetHasMfa gets a reference to the given bool and assigns it to the HasMfa field.
func (o *User) SetHasMfa(v bool) {
	o.HasMfa = &v
}

// GetLastEulaAccepted returns the LastEulaAccepted field value if set, zero value otherwise.
func (o *User) GetLastEulaAccepted() int32 {
	if o == nil || IsNil(o.LastEulaAccepted) {
		var ret int32
		return ret
	}
	return *o.LastEulaAccepted
}

// GetLastEulaAcceptedOk returns a tuple with the LastEulaAccepted field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *User) GetLastEulaAcceptedOk() (*int32, bool) {
	if o == nil || IsNil(o.LastEulaAccepted) {
		return nil, false
	}
	return o.LastEulaAccepted, true
}

// HasLastEulaAccepted returns a boolean if a field has been set.
func (o *User) HasLastEulaAccepted() bool {
	if o != nil && !IsNil(o.LastEulaAccepted) {
		return true
	}

	return false
}

// SetLastEulaAccepted gets a reference to the given int32 and assigns it to the LastEulaAccepted field.
func (o *User) SetLastEulaAccepted(v int32) {
	o.LastEulaAccepted = &v
}

// GetVerifiedPhone returns the VerifiedPhone field value if set, zero value otherwise.
func (o *User) GetVerifiedPhone() bool {
	if o == nil || IsNil(o.VerifiedPhone) {
		var ret bool
		return ret
	}
	return *o.VerifiedPhone
}

// GetVerifiedPhoneOk returns a tuple with the VerifiedPhone field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *User) GetVerifiedPhoneOk() (*bool, bool) {
	if o == nil || IsNil(o.VerifiedPhone) {
		return nil, false
	}
	return o.VerifiedPhone, true
}

// HasVerifiedPhone returns a boolean if a field has been set.
func (o *User) HasVerifiedPhone() bool {
	if o != nil && !IsNil(o.VerifiedPhone) {
		return true
	}

	return false
}

// SetVerifiedPhone gets a reference to the given bool and assigns it to the VerifiedPhone field.
func (o *User) SetVerifiedPhone(v bool) {
	o.VerifiedPhone = &v
}

// GetDefaultTeamId returns the DefaultTeamId field value if set, zero value otherwise.
func (o *User) GetDefaultTeamId() string {
	if o == nil || IsNil(o.DefaultTeamId) {
		var ret string
		return ret
	}
	return *o.DefaultTeamId
}

// GetDefaultTeamIdOk returns a tuple with the DefaultTeamId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *User) GetDefaultTeamIdOk() (*string, bool) {
	if o == nil || IsNil(o.DefaultTeamId) {
		return nil, false
	}
	return o.DefaultTeamId, true
}

// HasDefaultTeamId returns a boolean if a field has been set.
func (o *User) HasDefaultTeamId() bool {
	if o != nil && !IsNil(o.DefaultTeamId) {
		return true
	}

	return false
}

// SetDefaultTeamId gets a reference to the given string and assigns it to the DefaultTeamId field.
func (o *User) SetDefaultTeamId(v string) {
	o.DefaultTeamId = &v
}

func (o User) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o User) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Email) {
		toSerialize["email"] = o.Email
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Address) {
		toSerialize["address"] = o.Address
	}
	if !IsNil(o.Phone) {
		toSerialize["phone"] = o.Phone
	}
	if !IsNil(o.HasMfa) {
		toSerialize["hasMfa"] = o.HasMfa
	}
	if !IsNil(o.LastEulaAccepted) {
		toSerialize["lastEulaAccepted"] = o.LastEulaAccepted
	}
	if !IsNil(o.VerifiedPhone) {
		toSerialize["verifiedPhone"] = o.VerifiedPhone
	}
	if !IsNil(o.DefaultTeamId) {
		toSerialize["defaultTeamId"] = o.DefaultTeamId
	}
	return toSerialize, nil
}

type NullableUser struct {
	value *User
	isSet bool
}

func (v NullableUser) Get() *User {
	return v.value
}

func (v *NullableUser) Set(val *User) {
	v.value = val
	v.isSet = true
}

func (v NullableUser) IsSet() bool {
	return v.isSet
}

func (v *NullableUser) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUser(val *User) *NullableUser {
	return &NullableUser{value: val, isSet: true}
}

func (v NullableUser) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUser) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


