/*
The Span User API

API for sessions, teams and API tokens

API version: [version] [name]
Contact: contact@lab5e.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package spanuserapi

import (
	"encoding/json"
)

// checks if the GetGithubProfileResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &GetGithubProfileResponse{}

// GetGithubProfileResponse struct for GetGithubProfileResponse
type GetGithubProfileResponse struct {
	Name *string `json:"name,omitempty"`
	Email *string `json:"email,omitempty"`
	Address *string `json:"address,omitempty"`
	Phone *string `json:"phone,omitempty"`
}

// NewGetGithubProfileResponse instantiates a new GetGithubProfileResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGetGithubProfileResponse() *GetGithubProfileResponse {
	this := GetGithubProfileResponse{}
	return &this
}

// NewGetGithubProfileResponseWithDefaults instantiates a new GetGithubProfileResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGetGithubProfileResponseWithDefaults() *GetGithubProfileResponse {
	this := GetGithubProfileResponse{}
	return &this
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *GetGithubProfileResponse) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetGithubProfileResponse) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *GetGithubProfileResponse) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *GetGithubProfileResponse) SetName(v string) {
	o.Name = &v
}

// GetEmail returns the Email field value if set, zero value otherwise.
func (o *GetGithubProfileResponse) GetEmail() string {
	if o == nil || IsNil(o.Email) {
		var ret string
		return ret
	}
	return *o.Email
}

// GetEmailOk returns a tuple with the Email field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetGithubProfileResponse) GetEmailOk() (*string, bool) {
	if o == nil || IsNil(o.Email) {
		return nil, false
	}
	return o.Email, true
}

// HasEmail returns a boolean if a field has been set.
func (o *GetGithubProfileResponse) HasEmail() bool {
	if o != nil && !IsNil(o.Email) {
		return true
	}

	return false
}

// SetEmail gets a reference to the given string and assigns it to the Email field.
func (o *GetGithubProfileResponse) SetEmail(v string) {
	o.Email = &v
}

// GetAddress returns the Address field value if set, zero value otherwise.
func (o *GetGithubProfileResponse) GetAddress() string {
	if o == nil || IsNil(o.Address) {
		var ret string
		return ret
	}
	return *o.Address
}

// GetAddressOk returns a tuple with the Address field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetGithubProfileResponse) GetAddressOk() (*string, bool) {
	if o == nil || IsNil(o.Address) {
		return nil, false
	}
	return o.Address, true
}

// HasAddress returns a boolean if a field has been set.
func (o *GetGithubProfileResponse) HasAddress() bool {
	if o != nil && !IsNil(o.Address) {
		return true
	}

	return false
}

// SetAddress gets a reference to the given string and assigns it to the Address field.
func (o *GetGithubProfileResponse) SetAddress(v string) {
	o.Address = &v
}

// GetPhone returns the Phone field value if set, zero value otherwise.
func (o *GetGithubProfileResponse) GetPhone() string {
	if o == nil || IsNil(o.Phone) {
		var ret string
		return ret
	}
	return *o.Phone
}

// GetPhoneOk returns a tuple with the Phone field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GetGithubProfileResponse) GetPhoneOk() (*string, bool) {
	if o == nil || IsNil(o.Phone) {
		return nil, false
	}
	return o.Phone, true
}

// HasPhone returns a boolean if a field has been set.
func (o *GetGithubProfileResponse) HasPhone() bool {
	if o != nil && !IsNil(o.Phone) {
		return true
	}

	return false
}

// SetPhone gets a reference to the given string and assigns it to the Phone field.
func (o *GetGithubProfileResponse) SetPhone(v string) {
	o.Phone = &v
}

func (o GetGithubProfileResponse) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o GetGithubProfileResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Email) {
		toSerialize["email"] = o.Email
	}
	if !IsNil(o.Address) {
		toSerialize["address"] = o.Address
	}
	if !IsNil(o.Phone) {
		toSerialize["phone"] = o.Phone
	}
	return toSerialize, nil
}

type NullableGetGithubProfileResponse struct {
	value *GetGithubProfileResponse
	isSet bool
}

func (v NullableGetGithubProfileResponse) Get() *GetGithubProfileResponse {
	return v.value
}

func (v *NullableGetGithubProfileResponse) Set(val *GetGithubProfileResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableGetGithubProfileResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableGetGithubProfileResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGetGithubProfileResponse(val *GetGithubProfileResponse) *NullableGetGithubProfileResponse {
	return &NullableGetGithubProfileResponse{value: val, isSet: true}
}

func (v NullableGetGithubProfileResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGetGithubProfileResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


