/*
The Span User API

API for sessions, teams and API tokens

API version: [version] [name]
Contact: contact@lab5e.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package spanuserapi

import (
	"encoding/json"
	"fmt"
)

// MemberStatus the model 'MemberStatus'
type MemberStatus string

// List of MemberStatus
const (
	MEMBERSTATUS_UNSPECIFIED MemberStatus = "unspecified"
	MEMBERSTATUS_JOINED MemberStatus = "joined"
	MEMBERSTATUS_INVITED MemberStatus = "invited"
	MEMBERSTATUS_NOTREGISTERED MemberStatus = "notregistered"
)

// All allowed values of MemberStatus enum
var AllowedMemberStatusEnumValues = []MemberStatus{
	"unspecified",
	"joined",
	"invited",
	"notregistered",
}

func (v *MemberStatus) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := MemberStatus(value)
	for _, existing := range AllowedMemberStatusEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid MemberStatus", value)
}

// NewMemberStatusFromValue returns a pointer to a valid MemberStatus
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewMemberStatusFromValue(v string) (*MemberStatus, error) {
	ev := MemberStatus(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for MemberStatus: valid values are %v", v, AllowedMemberStatusEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v MemberStatus) IsValid() bool {
	for _, existing := range AllowedMemberStatusEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to MemberStatus value
func (v MemberStatus) Ptr() *MemberStatus {
	return &v
}

type NullableMemberStatus struct {
	value *MemberStatus
	isSet bool
}

func (v NullableMemberStatus) Get() *MemberStatus {
	return v.value
}

func (v *NullableMemberStatus) Set(val *MemberStatus) {
	v.value = val
	v.isSet = true
}

func (v NullableMemberStatus) IsSet() bool {
	return v.isSet
}

func (v *NullableMemberStatus) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMemberStatus(val *MemberStatus) *NullableMemberStatus {
	return &NullableMemberStatus{value: val, isSet: true}
}

func (v NullableMemberStatus) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMemberStatus) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

