/*
The Span User API

API for sessions, teams and API tokens

API version: [version] [name]
Contact: contact@lab5e.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package spanuserapi

import (
	"encoding/json"
)

// checks if the ListOrgsResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ListOrgsResponse{}

// ListOrgsResponse struct for ListOrgsResponse
type ListOrgsResponse struct {
	Orgs []Organisation `json:"orgs,omitempty"`
}

// NewListOrgsResponse instantiates a new ListOrgsResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewListOrgsResponse() *ListOrgsResponse {
	this := ListOrgsResponse{}
	return &this
}

// NewListOrgsResponseWithDefaults instantiates a new ListOrgsResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewListOrgsResponseWithDefaults() *ListOrgsResponse {
	this := ListOrgsResponse{}
	return &this
}

// GetOrgs returns the Orgs field value if set, zero value otherwise.
func (o *ListOrgsResponse) GetOrgs() []Organisation {
	if o == nil || IsNil(o.Orgs) {
		var ret []Organisation
		return ret
	}
	return o.Orgs
}

// GetOrgsOk returns a tuple with the Orgs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ListOrgsResponse) GetOrgsOk() ([]Organisation, bool) {
	if o == nil || IsNil(o.Orgs) {
		return nil, false
	}
	return o.Orgs, true
}

// HasOrgs returns a boolean if a field has been set.
func (o *ListOrgsResponse) HasOrgs() bool {
	if o != nil && !IsNil(o.Orgs) {
		return true
	}

	return false
}

// SetOrgs gets a reference to the given []Organisation and assigns it to the Orgs field.
func (o *ListOrgsResponse) SetOrgs(v []Organisation) {
	o.Orgs = v
}

func (o ListOrgsResponse) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ListOrgsResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Orgs) {
		toSerialize["orgs"] = o.Orgs
	}
	return toSerialize, nil
}

type NullableListOrgsResponse struct {
	value *ListOrgsResponse
	isSet bool
}

func (v NullableListOrgsResponse) Get() *ListOrgsResponse {
	return v.value
}

func (v *NullableListOrgsResponse) Set(val *ListOrgsResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableListOrgsResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableListOrgsResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableListOrgsResponse(val *ListOrgsResponse) *NullableListOrgsResponse {
	return &NullableListOrgsResponse{value: val, isSet: true}
}

func (v NullableListOrgsResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableListOrgsResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


