/*
The Span User API

API for sessions, teams and API tokens

API version: [version] [name]
Contact: contact@lab5e.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package spanuserapi

import (
	"encoding/json"
)

// checks if the ListInvitesResponse type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ListInvitesResponse{}

// ListInvitesResponse struct for ListInvitesResponse
type ListInvitesResponse struct {
	Invites []Invite `json:"invites,omitempty"`
}

// NewListInvitesResponse instantiates a new ListInvitesResponse object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewListInvitesResponse() *ListInvitesResponse {
	this := ListInvitesResponse{}
	return &this
}

// NewListInvitesResponseWithDefaults instantiates a new ListInvitesResponse object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewListInvitesResponseWithDefaults() *ListInvitesResponse {
	this := ListInvitesResponse{}
	return &this
}

// GetInvites returns the Invites field value if set, zero value otherwise.
func (o *ListInvitesResponse) GetInvites() []Invite {
	if o == nil || IsNil(o.Invites) {
		var ret []Invite
		return ret
	}
	return o.Invites
}

// GetInvitesOk returns a tuple with the Invites field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ListInvitesResponse) GetInvitesOk() ([]Invite, bool) {
	if o == nil || IsNil(o.Invites) {
		return nil, false
	}
	return o.Invites, true
}

// HasInvites returns a boolean if a field has been set.
func (o *ListInvitesResponse) HasInvites() bool {
	if o != nil && !IsNil(o.Invites) {
		return true
	}

	return false
}

// SetInvites gets a reference to the given []Invite and assigns it to the Invites field.
func (o *ListInvitesResponse) SetInvites(v []Invite) {
	o.Invites = v
}

func (o ListInvitesResponse) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ListInvitesResponse) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Invites) {
		toSerialize["invites"] = o.Invites
	}
	return toSerialize, nil
}

type NullableListInvitesResponse struct {
	value *ListInvitesResponse
	isSet bool
}

func (v NullableListInvitesResponse) Get() *ListInvitesResponse {
	return v.value
}

func (v *NullableListInvitesResponse) Set(val *ListInvitesResponse) {
	v.value = val
	v.isSet = true
}

func (v NullableListInvitesResponse) IsSet() bool {
	return v.isSet
}

func (v *NullableListInvitesResponse) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableListInvitesResponse(val *ListInvitesResponse) *NullableListInvitesResponse {
	return &NullableListInvitesResponse{value: val, isSet: true}
}

func (v NullableListInvitesResponse) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableListInvitesResponse) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


