/*
The Span User API

API for sessions, teams and API tokens

API version: [version] [name]
Contact: contact@lab5e.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package spanuserapi

import (
	"encoding/json"
	"fmt"
)

// LoginResponseResult the model 'LoginResponseResult'
type LoginResponseResult string

// List of LoginResponse.Result
const (
	LOGINRESPONSERESULT_UNSPECIFIED LoginResponseResult = "RESULT_UNSPECIFIED"
	LOGINRESPONSERESULT_SUCCESS LoginResponseResult = "RESULT_SUCCESS"
	LOGINRESPONSERESULT_INCOMPLETE LoginResponseResult = "RESULT_INCOMPLETE"
	LOGINRESPONSERESULT_INVALID LoginResponseResult = "RESULT_INVALID"
)

// All allowed values of LoginResponseResult enum
var AllowedLoginResponseResultEnumValues = []LoginResponseResult{
	"RESULT_UNSPECIFIED",
	"RESULT_SUCCESS",
	"RESULT_INCOMPLETE",
	"RESULT_INVALID",
}

func (v *LoginResponseResult) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := LoginResponseResult(value)
	for _, existing := range AllowedLoginResponseResultEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid LoginResponseResult", value)
}

// NewLoginResponseResultFromValue returns a pointer to a valid LoginResponseResult
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewLoginResponseResultFromValue(v string) (*LoginResponseResult, error) {
	ev := LoginResponseResult(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for LoginResponseResult: valid values are %v", v, AllowedLoginResponseResultEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v LoginResponseResult) IsValid() bool {
	for _, existing := range AllowedLoginResponseResultEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to LoginResponse.Result value
func (v LoginResponseResult) Ptr() *LoginResponseResult {
	return &v
}

type NullableLoginResponseResult struct {
	value *LoginResponseResult
	isSet bool
}

func (v NullableLoginResponseResult) Get() *LoginResponseResult {
	return v.value
}

func (v *NullableLoginResponseResult) Set(val *LoginResponseResult) {
	v.value = val
	v.isSet = true
}

func (v NullableLoginResponseResult) IsSet() bool {
	return v.isSet
}

func (v *NullableLoginResponseResult) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableLoginResponseResult(val *LoginResponseResult) *NullableLoginResponseResult {
	return &NullableLoginResponseResult{value: val, isSet: true}
}

func (v NullableLoginResponseResult) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableLoginResponseResult) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

