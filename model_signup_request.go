/*
The Span User API

API for sessions, teams and API tokens

API version: [version] [name]
Contact: contact@lab5e.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package spanuserapi

import (
	"encoding/json"
)

// checks if the SignupRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SignupRequest{}

// SignupRequest struct for SignupRequest
type SignupRequest struct {
	Email *string `json:"email,omitempty"`
	// Name is a required field.
	Name *string `json:"name,omitempty"`
	// Address is a free-form field and may be left blank.
	Address *string `json:"address,omitempty"`
	Phone *string `json:"phone,omitempty"`
	// parentheses are ignored.  This version must be set to the current EULA version
	AcceptedEulaVersion *int32 `json:"acceptedEulaVersion,omitempty"`
}

// NewSignupRequest instantiates a new SignupRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSignupRequest() *SignupRequest {
	this := SignupRequest{}
	return &this
}

// NewSignupRequestWithDefaults instantiates a new SignupRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSignupRequestWithDefaults() *SignupRequest {
	this := SignupRequest{}
	return &this
}

// GetEmail returns the Email field value if set, zero value otherwise.
func (o *SignupRequest) GetEmail() string {
	if o == nil || IsNil(o.Email) {
		var ret string
		return ret
	}
	return *o.Email
}

// GetEmailOk returns a tuple with the Email field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SignupRequest) GetEmailOk() (*string, bool) {
	if o == nil || IsNil(o.Email) {
		return nil, false
	}
	return o.Email, true
}

// HasEmail returns a boolean if a field has been set.
func (o *SignupRequest) HasEmail() bool {
	if o != nil && !IsNil(o.Email) {
		return true
	}

	return false
}

// SetEmail gets a reference to the given string and assigns it to the Email field.
func (o *SignupRequest) SetEmail(v string) {
	o.Email = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *SignupRequest) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SignupRequest) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *SignupRequest) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *SignupRequest) SetName(v string) {
	o.Name = &v
}

// GetAddress returns the Address field value if set, zero value otherwise.
func (o *SignupRequest) GetAddress() string {
	if o == nil || IsNil(o.Address) {
		var ret string
		return ret
	}
	return *o.Address
}

// GetAddressOk returns a tuple with the Address field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SignupRequest) GetAddressOk() (*string, bool) {
	if o == nil || IsNil(o.Address) {
		return nil, false
	}
	return o.Address, true
}

// HasAddress returns a boolean if a field has been set.
func (o *SignupRequest) HasAddress() bool {
	if o != nil && !IsNil(o.Address) {
		return true
	}

	return false
}

// SetAddress gets a reference to the given string and assigns it to the Address field.
func (o *SignupRequest) SetAddress(v string) {
	o.Address = &v
}

// GetPhone returns the Phone field value if set, zero value otherwise.
func (o *SignupRequest) GetPhone() string {
	if o == nil || IsNil(o.Phone) {
		var ret string
		return ret
	}
	return *o.Phone
}

// GetPhoneOk returns a tuple with the Phone field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SignupRequest) GetPhoneOk() (*string, bool) {
	if o == nil || IsNil(o.Phone) {
		return nil, false
	}
	return o.Phone, true
}

// HasPhone returns a boolean if a field has been set.
func (o *SignupRequest) HasPhone() bool {
	if o != nil && !IsNil(o.Phone) {
		return true
	}

	return false
}

// SetPhone gets a reference to the given string and assigns it to the Phone field.
func (o *SignupRequest) SetPhone(v string) {
	o.Phone = &v
}

// GetAcceptedEulaVersion returns the AcceptedEulaVersion field value if set, zero value otherwise.
func (o *SignupRequest) GetAcceptedEulaVersion() int32 {
	if o == nil || IsNil(o.AcceptedEulaVersion) {
		var ret int32
		return ret
	}
	return *o.AcceptedEulaVersion
}

// GetAcceptedEulaVersionOk returns a tuple with the AcceptedEulaVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SignupRequest) GetAcceptedEulaVersionOk() (*int32, bool) {
	if o == nil || IsNil(o.AcceptedEulaVersion) {
		return nil, false
	}
	return o.AcceptedEulaVersion, true
}

// HasAcceptedEulaVersion returns a boolean if a field has been set.
func (o *SignupRequest) HasAcceptedEulaVersion() bool {
	if o != nil && !IsNil(o.AcceptedEulaVersion) {
		return true
	}

	return false
}

// SetAcceptedEulaVersion gets a reference to the given int32 and assigns it to the AcceptedEulaVersion field.
func (o *SignupRequest) SetAcceptedEulaVersion(v int32) {
	o.AcceptedEulaVersion = &v
}

func (o SignupRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SignupRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Email) {
		toSerialize["email"] = o.Email
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Address) {
		toSerialize["address"] = o.Address
	}
	if !IsNil(o.Phone) {
		toSerialize["phone"] = o.Phone
	}
	if !IsNil(o.AcceptedEulaVersion) {
		toSerialize["acceptedEulaVersion"] = o.AcceptedEulaVersion
	}
	return toSerialize, nil
}

type NullableSignupRequest struct {
	value *SignupRequest
	isSet bool
}

func (v NullableSignupRequest) Get() *SignupRequest {
	return v.value
}

func (v *NullableSignupRequest) Set(val *SignupRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableSignupRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableSignupRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSignupRequest(val *SignupRequest) *NullableSignupRequest {
	return &NullableSignupRequest{value: val, isSet: true}
}

func (v NullableSignupRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSignupRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


