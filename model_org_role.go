/*
The Span User API

API for sessions, teams and API tokens

API version: [version] [name]
Contact: contact@lab5e.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package spanuserapi

import (
	"encoding/json"
	"fmt"
)

// OrgRole the model 'OrgRole'
type OrgRole string

// List of OrgRole
const (
	ORGROLE_UNSPECIFIED OrgRole = "ORG_ROLE_UNSPECIFIED"
	ORGROLE_OWNER OrgRole = "ORG_ROLE_OWNER"
	ORGROLE_MEMBER OrgRole = "ORG_ROLE_MEMBER"
)

// All allowed values of OrgRole enum
var AllowedOrgRoleEnumValues = []OrgRole{
	"ORG_ROLE_UNSPECIFIED",
	"ORG_ROLE_OWNER",
	"ORG_ROLE_MEMBER",
}

func (v *OrgRole) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := OrgRole(value)
	for _, existing := range AllowedOrgRoleEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid OrgRole", value)
}

// NewOrgRoleFromValue returns a pointer to a valid OrgRole
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewOrgRoleFromValue(v string) (*OrgRole, error) {
	ev := OrgRole(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for OrgRole: valid values are %v", v, AllowedOrgRoleEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v OrgRole) IsValid() bool {
	for _, existing := range AllowedOrgRoleEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to OrgRole value
func (v OrgRole) Ptr() *OrgRole {
	return &v
}

type NullableOrgRole struct {
	value *OrgRole
	isSet bool
}

func (v NullableOrgRole) Get() *OrgRole {
	return v.value
}

func (v *NullableOrgRole) Set(val *OrgRole) {
	v.value = val
	v.isSet = true
}

func (v NullableOrgRole) IsSet() bool {
	return v.isSet
}

func (v *NullableOrgRole) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOrgRole(val *OrgRole) *NullableOrgRole {
	return &NullableOrgRole{value: val, isSet: true}
}

func (v NullableOrgRole) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOrgRole) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

