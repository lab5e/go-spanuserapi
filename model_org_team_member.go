/*
The Span User API

API for sessions, teams and API tokens

API version: [version] [name]
Contact: contact@lab5e.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package spanuserapi

import (
	"encoding/json"
)

// checks if the OrgTeamMember type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &OrgTeamMember{}

// OrgTeamMember A team member. The team members are all members of the organisation and the name and email fields are for informational purposes only.
type OrgTeamMember struct {
	MemberId *string `json:"memberId,omitempty"`
	TeamRole *OrgRole `json:"teamRole,omitempty"`
	Name *string `json:"name,omitempty"`
	Email *string `json:"email,omitempty"`
}

// NewOrgTeamMember instantiates a new OrgTeamMember object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewOrgTeamMember() *OrgTeamMember {
	this := OrgTeamMember{}
	var teamRole OrgRole = ORGROLE_UNSPECIFIED
	this.TeamRole = &teamRole
	return &this
}

// NewOrgTeamMemberWithDefaults instantiates a new OrgTeamMember object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOrgTeamMemberWithDefaults() *OrgTeamMember {
	this := OrgTeamMember{}
	var teamRole OrgRole = ORGROLE_UNSPECIFIED
	this.TeamRole = &teamRole
	return &this
}

// GetMemberId returns the MemberId field value if set, zero value otherwise.
func (o *OrgTeamMember) GetMemberId() string {
	if o == nil || IsNil(o.MemberId) {
		var ret string
		return ret
	}
	return *o.MemberId
}

// GetMemberIdOk returns a tuple with the MemberId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrgTeamMember) GetMemberIdOk() (*string, bool) {
	if o == nil || IsNil(o.MemberId) {
		return nil, false
	}
	return o.MemberId, true
}

// HasMemberId returns a boolean if a field has been set.
func (o *OrgTeamMember) HasMemberId() bool {
	if o != nil && !IsNil(o.MemberId) {
		return true
	}

	return false
}

// SetMemberId gets a reference to the given string and assigns it to the MemberId field.
func (o *OrgTeamMember) SetMemberId(v string) {
	o.MemberId = &v
}

// GetTeamRole returns the TeamRole field value if set, zero value otherwise.
func (o *OrgTeamMember) GetTeamRole() OrgRole {
	if o == nil || IsNil(o.TeamRole) {
		var ret OrgRole
		return ret
	}
	return *o.TeamRole
}

// GetTeamRoleOk returns a tuple with the TeamRole field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrgTeamMember) GetTeamRoleOk() (*OrgRole, bool) {
	if o == nil || IsNil(o.TeamRole) {
		return nil, false
	}
	return o.TeamRole, true
}

// HasTeamRole returns a boolean if a field has been set.
func (o *OrgTeamMember) HasTeamRole() bool {
	if o != nil && !IsNil(o.TeamRole) {
		return true
	}

	return false
}

// SetTeamRole gets a reference to the given OrgRole and assigns it to the TeamRole field.
func (o *OrgTeamMember) SetTeamRole(v OrgRole) {
	o.TeamRole = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *OrgTeamMember) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrgTeamMember) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *OrgTeamMember) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *OrgTeamMember) SetName(v string) {
	o.Name = &v
}

// GetEmail returns the Email field value if set, zero value otherwise.
func (o *OrgTeamMember) GetEmail() string {
	if o == nil || IsNil(o.Email) {
		var ret string
		return ret
	}
	return *o.Email
}

// GetEmailOk returns a tuple with the Email field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrgTeamMember) GetEmailOk() (*string, bool) {
	if o == nil || IsNil(o.Email) {
		return nil, false
	}
	return o.Email, true
}

// HasEmail returns a boolean if a field has been set.
func (o *OrgTeamMember) HasEmail() bool {
	if o != nil && !IsNil(o.Email) {
		return true
	}

	return false
}

// SetEmail gets a reference to the given string and assigns it to the Email field.
func (o *OrgTeamMember) SetEmail(v string) {
	o.Email = &v
}

func (o OrgTeamMember) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o OrgTeamMember) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.MemberId) {
		toSerialize["memberId"] = o.MemberId
	}
	if !IsNil(o.TeamRole) {
		toSerialize["teamRole"] = o.TeamRole
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.Email) {
		toSerialize["email"] = o.Email
	}
	return toSerialize, nil
}

type NullableOrgTeamMember struct {
	value *OrgTeamMember
	isSet bool
}

func (v NullableOrgTeamMember) Get() *OrgTeamMember {
	return v.value
}

func (v *NullableOrgTeamMember) Set(val *OrgTeamMember) {
	v.value = val
	v.isSet = true
}

func (v NullableOrgTeamMember) IsSet() bool {
	return v.isSet
}

func (v *NullableOrgTeamMember) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOrgTeamMember(val *OrgTeamMember) *NullableOrgTeamMember {
	return &NullableOrgTeamMember{value: val, isSet: true}
}

func (v NullableOrgTeamMember) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOrgTeamMember) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


