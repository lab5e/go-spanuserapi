/*
The Span User API

API for sessions, teams and API tokens

API version: [version] [name]
Contact: contact@lab5e.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package spanuserapi

import (
	"encoding/json"
)

// checks if the UpdateProfileRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &UpdateProfileRequest{}

// UpdateProfileRequest Update the user profile. The existing password is required in all cases. If an MFA token is assigned to the account it is required to update the profile information.
type UpdateProfileRequest struct {
	User *User `json:"user,omitempty"`
	ExistingPassword *string `json:"existingPassword,omitempty"`
	Passcode *string `json:"passcode,omitempty"`
}

// NewUpdateProfileRequest instantiates a new UpdateProfileRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUpdateProfileRequest() *UpdateProfileRequest {
	this := UpdateProfileRequest{}
	return &this
}

// NewUpdateProfileRequestWithDefaults instantiates a new UpdateProfileRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUpdateProfileRequestWithDefaults() *UpdateProfileRequest {
	this := UpdateProfileRequest{}
	return &this
}

// GetUser returns the User field value if set, zero value otherwise.
func (o *UpdateProfileRequest) GetUser() User {
	if o == nil || IsNil(o.User) {
		var ret User
		return ret
	}
	return *o.User
}

// GetUserOk returns a tuple with the User field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateProfileRequest) GetUserOk() (*User, bool) {
	if o == nil || IsNil(o.User) {
		return nil, false
	}
	return o.User, true
}

// HasUser returns a boolean if a field has been set.
func (o *UpdateProfileRequest) HasUser() bool {
	if o != nil && !IsNil(o.User) {
		return true
	}

	return false
}

// SetUser gets a reference to the given User and assigns it to the User field.
func (o *UpdateProfileRequest) SetUser(v User) {
	o.User = &v
}

// GetExistingPassword returns the ExistingPassword field value if set, zero value otherwise.
func (o *UpdateProfileRequest) GetExistingPassword() string {
	if o == nil || IsNil(o.ExistingPassword) {
		var ret string
		return ret
	}
	return *o.ExistingPassword
}

// GetExistingPasswordOk returns a tuple with the ExistingPassword field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateProfileRequest) GetExistingPasswordOk() (*string, bool) {
	if o == nil || IsNil(o.ExistingPassword) {
		return nil, false
	}
	return o.ExistingPassword, true
}

// HasExistingPassword returns a boolean if a field has been set.
func (o *UpdateProfileRequest) HasExistingPassword() bool {
	if o != nil && !IsNil(o.ExistingPassword) {
		return true
	}

	return false
}

// SetExistingPassword gets a reference to the given string and assigns it to the ExistingPassword field.
func (o *UpdateProfileRequest) SetExistingPassword(v string) {
	o.ExistingPassword = &v
}

// GetPasscode returns the Passcode field value if set, zero value otherwise.
func (o *UpdateProfileRequest) GetPasscode() string {
	if o == nil || IsNil(o.Passcode) {
		var ret string
		return ret
	}
	return *o.Passcode
}

// GetPasscodeOk returns a tuple with the Passcode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UpdateProfileRequest) GetPasscodeOk() (*string, bool) {
	if o == nil || IsNil(o.Passcode) {
		return nil, false
	}
	return o.Passcode, true
}

// HasPasscode returns a boolean if a field has been set.
func (o *UpdateProfileRequest) HasPasscode() bool {
	if o != nil && !IsNil(o.Passcode) {
		return true
	}

	return false
}

// SetPasscode gets a reference to the given string and assigns it to the Passcode field.
func (o *UpdateProfileRequest) SetPasscode(v string) {
	o.Passcode = &v
}

func (o UpdateProfileRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o UpdateProfileRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.User) {
		toSerialize["user"] = o.User
	}
	if !IsNil(o.ExistingPassword) {
		toSerialize["existingPassword"] = o.ExistingPassword
	}
	if !IsNil(o.Passcode) {
		toSerialize["passcode"] = o.Passcode
	}
	return toSerialize, nil
}

type NullableUpdateProfileRequest struct {
	value *UpdateProfileRequest
	isSet bool
}

func (v NullableUpdateProfileRequest) Get() *UpdateProfileRequest {
	return v.value
}

func (v *NullableUpdateProfileRequest) Set(val *UpdateProfileRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableUpdateProfileRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableUpdateProfileRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUpdateProfileRequest(val *UpdateProfileRequest) *NullableUpdateProfileRequest {
	return &NullableUpdateProfileRequest{value: val, isSet: true}
}

func (v NullableUpdateProfileRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUpdateProfileRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


