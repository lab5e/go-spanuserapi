/*
The Span User API

API for sessions, teams and API tokens

API version: [version] [name]
Contact: contact@lab5e.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package spanuserapi

import (
	"encoding/json"
)

// checks if the TeamMemberRequest type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TeamMemberRequest{}

// TeamMemberRequest A request that mutates the member list
type TeamMemberRequest struct {
	MemberId *string `json:"memberId,omitempty"`
	Role *OrgRole `json:"role,omitempty"`
}

// NewTeamMemberRequest instantiates a new TeamMemberRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTeamMemberRequest() *TeamMemberRequest {
	this := TeamMemberRequest{}
	var role OrgRole = ORGROLE_UNSPECIFIED
	this.Role = &role
	return &this
}

// NewTeamMemberRequestWithDefaults instantiates a new TeamMemberRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTeamMemberRequestWithDefaults() *TeamMemberRequest {
	this := TeamMemberRequest{}
	var role OrgRole = ORGROLE_UNSPECIFIED
	this.Role = &role
	return &this
}

// GetMemberId returns the MemberId field value if set, zero value otherwise.
func (o *TeamMemberRequest) GetMemberId() string {
	if o == nil || IsNil(o.MemberId) {
		var ret string
		return ret
	}
	return *o.MemberId
}

// GetMemberIdOk returns a tuple with the MemberId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TeamMemberRequest) GetMemberIdOk() (*string, bool) {
	if o == nil || IsNil(o.MemberId) {
		return nil, false
	}
	return o.MemberId, true
}

// HasMemberId returns a boolean if a field has been set.
func (o *TeamMemberRequest) HasMemberId() bool {
	if o != nil && !IsNil(o.MemberId) {
		return true
	}

	return false
}

// SetMemberId gets a reference to the given string and assigns it to the MemberId field.
func (o *TeamMemberRequest) SetMemberId(v string) {
	o.MemberId = &v
}

// GetRole returns the Role field value if set, zero value otherwise.
func (o *TeamMemberRequest) GetRole() OrgRole {
	if o == nil || IsNil(o.Role) {
		var ret OrgRole
		return ret
	}
	return *o.Role
}

// GetRoleOk returns a tuple with the Role field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TeamMemberRequest) GetRoleOk() (*OrgRole, bool) {
	if o == nil || IsNil(o.Role) {
		return nil, false
	}
	return o.Role, true
}

// HasRole returns a boolean if a field has been set.
func (o *TeamMemberRequest) HasRole() bool {
	if o != nil && !IsNil(o.Role) {
		return true
	}

	return false
}

// SetRole gets a reference to the given OrgRole and assigns it to the Role field.
func (o *TeamMemberRequest) SetRole(v OrgRole) {
	o.Role = &v
}

func (o TeamMemberRequest) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TeamMemberRequest) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.MemberId) {
		toSerialize["memberId"] = o.MemberId
	}
	if !IsNil(o.Role) {
		toSerialize["role"] = o.Role
	}
	return toSerialize, nil
}

type NullableTeamMemberRequest struct {
	value *TeamMemberRequest
	isSet bool
}

func (v NullableTeamMemberRequest) Get() *TeamMemberRequest {
	return v.value
}

func (v *NullableTeamMemberRequest) Set(val *TeamMemberRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableTeamMemberRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableTeamMemberRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTeamMemberRequest(val *TeamMemberRequest) *NullableTeamMemberRequest {
	return &NullableTeamMemberRequest{value: val, isSet: true}
}

func (v NullableTeamMemberRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTeamMemberRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


