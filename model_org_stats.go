/*
The Span User API

API for sessions, teams and API tokens

API version: [version] [name]
Contact: contact@lab5e.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package spanuserapi

import (
	"encoding/json"
)

// checks if the OrgStats type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &OrgStats{}

// OrgStats Basic statistics on org
type OrgStats struct {
	ApiTokens *int32 `json:"apiTokens,omitempty"`
	Collections *int32 `json:"collections,omitempty"`
	Teams *int32 `json:"teams,omitempty"`
	Members *int32 `json:"members,omitempty"`
	Invites *int32 `json:"invites,omitempty"`
}

// NewOrgStats instantiates a new OrgStats object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewOrgStats() *OrgStats {
	this := OrgStats{}
	return &this
}

// NewOrgStatsWithDefaults instantiates a new OrgStats object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOrgStatsWithDefaults() *OrgStats {
	this := OrgStats{}
	return &this
}

// GetApiTokens returns the ApiTokens field value if set, zero value otherwise.
func (o *OrgStats) GetApiTokens() int32 {
	if o == nil || IsNil(o.ApiTokens) {
		var ret int32
		return ret
	}
	return *o.ApiTokens
}

// GetApiTokensOk returns a tuple with the ApiTokens field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrgStats) GetApiTokensOk() (*int32, bool) {
	if o == nil || IsNil(o.ApiTokens) {
		return nil, false
	}
	return o.ApiTokens, true
}

// HasApiTokens returns a boolean if a field has been set.
func (o *OrgStats) HasApiTokens() bool {
	if o != nil && !IsNil(o.ApiTokens) {
		return true
	}

	return false
}

// SetApiTokens gets a reference to the given int32 and assigns it to the ApiTokens field.
func (o *OrgStats) SetApiTokens(v int32) {
	o.ApiTokens = &v
}

// GetCollections returns the Collections field value if set, zero value otherwise.
func (o *OrgStats) GetCollections() int32 {
	if o == nil || IsNil(o.Collections) {
		var ret int32
		return ret
	}
	return *o.Collections
}

// GetCollectionsOk returns a tuple with the Collections field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrgStats) GetCollectionsOk() (*int32, bool) {
	if o == nil || IsNil(o.Collections) {
		return nil, false
	}
	return o.Collections, true
}

// HasCollections returns a boolean if a field has been set.
func (o *OrgStats) HasCollections() bool {
	if o != nil && !IsNil(o.Collections) {
		return true
	}

	return false
}

// SetCollections gets a reference to the given int32 and assigns it to the Collections field.
func (o *OrgStats) SetCollections(v int32) {
	o.Collections = &v
}

// GetTeams returns the Teams field value if set, zero value otherwise.
func (o *OrgStats) GetTeams() int32 {
	if o == nil || IsNil(o.Teams) {
		var ret int32
		return ret
	}
	return *o.Teams
}

// GetTeamsOk returns a tuple with the Teams field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrgStats) GetTeamsOk() (*int32, bool) {
	if o == nil || IsNil(o.Teams) {
		return nil, false
	}
	return o.Teams, true
}

// HasTeams returns a boolean if a field has been set.
func (o *OrgStats) HasTeams() bool {
	if o != nil && !IsNil(o.Teams) {
		return true
	}

	return false
}

// SetTeams gets a reference to the given int32 and assigns it to the Teams field.
func (o *OrgStats) SetTeams(v int32) {
	o.Teams = &v
}

// GetMembers returns the Members field value if set, zero value otherwise.
func (o *OrgStats) GetMembers() int32 {
	if o == nil || IsNil(o.Members) {
		var ret int32
		return ret
	}
	return *o.Members
}

// GetMembersOk returns a tuple with the Members field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrgStats) GetMembersOk() (*int32, bool) {
	if o == nil || IsNil(o.Members) {
		return nil, false
	}
	return o.Members, true
}

// HasMembers returns a boolean if a field has been set.
func (o *OrgStats) HasMembers() bool {
	if o != nil && !IsNil(o.Members) {
		return true
	}

	return false
}

// SetMembers gets a reference to the given int32 and assigns it to the Members field.
func (o *OrgStats) SetMembers(v int32) {
	o.Members = &v
}

// GetInvites returns the Invites field value if set, zero value otherwise.
func (o *OrgStats) GetInvites() int32 {
	if o == nil || IsNil(o.Invites) {
		var ret int32
		return ret
	}
	return *o.Invites
}

// GetInvitesOk returns a tuple with the Invites field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OrgStats) GetInvitesOk() (*int32, bool) {
	if o == nil || IsNil(o.Invites) {
		return nil, false
	}
	return o.Invites, true
}

// HasInvites returns a boolean if a field has been set.
func (o *OrgStats) HasInvites() bool {
	if o != nil && !IsNil(o.Invites) {
		return true
	}

	return false
}

// SetInvites gets a reference to the given int32 and assigns it to the Invites field.
func (o *OrgStats) SetInvites(v int32) {
	o.Invites = &v
}

func (o OrgStats) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o OrgStats) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.ApiTokens) {
		toSerialize["apiTokens"] = o.ApiTokens
	}
	if !IsNil(o.Collections) {
		toSerialize["collections"] = o.Collections
	}
	if !IsNil(o.Teams) {
		toSerialize["teams"] = o.Teams
	}
	if !IsNil(o.Members) {
		toSerialize["members"] = o.Members
	}
	if !IsNil(o.Invites) {
		toSerialize["invites"] = o.Invites
	}
	return toSerialize, nil
}

type NullableOrgStats struct {
	value *OrgStats
	isSet bool
}

func (v NullableOrgStats) Get() *OrgStats {
	return v.value
}

func (v *NullableOrgStats) Set(val *OrgStats) {
	v.value = val
	v.isSet = true
}

func (v NullableOrgStats) IsSet() bool {
	return v.isSet
}

func (v *NullableOrgStats) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOrgStats(val *OrgStats) *NullableOrgStats {
	return &NullableOrgStats{value: val, isSet: true}
}

func (v NullableOrgStats) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOrgStats) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


