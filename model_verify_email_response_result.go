/*
The Span User API

API for sessions, teams and API tokens

API version: [version] [name]
Contact: contact@lab5e.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package spanuserapi

import (
	"encoding/json"
	"fmt"
)

// VerifyEmailResponseResult the model 'VerifyEmailResponseResult'
type VerifyEmailResponseResult string

// List of VerifyEmailResponse.Result
const (
	VERIFYEMAILRESPONSERESULT_UNSPECIFIED VerifyEmailResponseResult = "RESULT_UNSPECIFIED"
	VERIFYEMAILRESPONSERESULT_SUCCESS VerifyEmailResponseResult = "RESULT_SUCCESS"
	VERIFYEMAILRESPONSERESULT_ERROR VerifyEmailResponseResult = "RESULT_ERROR"
)

// All allowed values of VerifyEmailResponseResult enum
var AllowedVerifyEmailResponseResultEnumValues = []VerifyEmailResponseResult{
	"RESULT_UNSPECIFIED",
	"RESULT_SUCCESS",
	"RESULT_ERROR",
}

func (v *VerifyEmailResponseResult) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := VerifyEmailResponseResult(value)
	for _, existing := range AllowedVerifyEmailResponseResultEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid VerifyEmailResponseResult", value)
}

// NewVerifyEmailResponseResultFromValue returns a pointer to a valid VerifyEmailResponseResult
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewVerifyEmailResponseResultFromValue(v string) (*VerifyEmailResponseResult, error) {
	ev := VerifyEmailResponseResult(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for VerifyEmailResponseResult: valid values are %v", v, AllowedVerifyEmailResponseResultEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v VerifyEmailResponseResult) IsValid() bool {
	for _, existing := range AllowedVerifyEmailResponseResultEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to VerifyEmailResponse.Result value
func (v VerifyEmailResponseResult) Ptr() *VerifyEmailResponseResult {
	return &v
}

type NullableVerifyEmailResponseResult struct {
	value *VerifyEmailResponseResult
	isSet bool
}

func (v NullableVerifyEmailResponseResult) Get() *VerifyEmailResponseResult {
	return v.value
}

func (v *NullableVerifyEmailResponseResult) Set(val *VerifyEmailResponseResult) {
	v.value = val
	v.isSet = true
}

func (v NullableVerifyEmailResponseResult) IsSet() bool {
	return v.isSet
}

func (v *NullableVerifyEmailResponseResult) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVerifyEmailResponseResult(val *VerifyEmailResponseResult) *NullableVerifyEmailResponseResult {
	return &NullableVerifyEmailResponseResult{value: val, isSet: true}
}

func (v NullableVerifyEmailResponseResult) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVerifyEmailResponseResult) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

