/*
The Span User API

API for sessions, teams and API tokens

API version: [version] [name]
Contact: contact@lab5e.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package spanuserapi

import (
	"encoding/json"
	"fmt"
)

// Format the model 'Format'
type Format string

// List of Format
const (
	FORMAT_UNSPECIFIED Format = "FORMAT_UNSPECIFIED"
	FORMAT_HTML Format = "FORMAT_HTML"
	FORMAT_MARKDOWN Format = "FORMAT_MARKDOWN"
)

// All allowed values of Format enum
var AllowedFormatEnumValues = []Format{
	"FORMAT_UNSPECIFIED",
	"FORMAT_HTML",
	"FORMAT_MARKDOWN",
}

func (v *Format) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := Format(value)
	for _, existing := range AllowedFormatEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid Format", value)
}

// NewFormatFromValue returns a pointer to a valid Format
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewFormatFromValue(v string) (*Format, error) {
	ev := Format(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for Format: valid values are %v", v, AllowedFormatEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v Format) IsValid() bool {
	for _, existing := range AllowedFormatEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to Format value
func (v Format) Ptr() *Format {
	return &v
}

type NullableFormat struct {
	value *Format
	isSet bool
}

func (v NullableFormat) Get() *Format {
	return v.value
}

func (v *NullableFormat) Set(val *Format) {
	v.value = val
	v.isSet = true
}

func (v NullableFormat) IsSet() bool {
	return v.isSet
}

func (v *NullableFormat) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFormat(val *Format) *NullableFormat {
	return &NullableFormat{value: val, isSet: true}
}

func (v NullableFormat) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFormat) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

