/*
The Span User API

API for sessions, teams and API tokens

API version: [version] [name]
Contact: contact@lab5e.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package spanuserapi

import (
	"encoding/json"
)

// checks if the SessionInfo type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &SessionInfo{}

// SessionInfo struct for SessionInfo
type SessionInfo struct {
	Start *string `json:"start,omitempty"`
	End *string `json:"end,omitempty"`
	Ip *string `json:"ip,omitempty"`
	Location *string `json:"location,omitempty"`
	Platform *string `json:"platform,omitempty"`
	Browser *string `json:"browser,omitempty"`
	Device *SessionInfoType `json:"device,omitempty"`
	CurrentSession *bool `json:"currentSession,omitempty"`
	Active *bool `json:"active,omitempty"`
}

// NewSessionInfo instantiates a new SessionInfo object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSessionInfo() *SessionInfo {
	this := SessionInfo{}
	var device SessionInfoType = SESSIONINFOTYPE_UNSPECIFIED
	this.Device = &device
	return &this
}

// NewSessionInfoWithDefaults instantiates a new SessionInfo object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSessionInfoWithDefaults() *SessionInfo {
	this := SessionInfo{}
	var device SessionInfoType = SESSIONINFOTYPE_UNSPECIFIED
	this.Device = &device
	return &this
}

// GetStart returns the Start field value if set, zero value otherwise.
func (o *SessionInfo) GetStart() string {
	if o == nil || IsNil(o.Start) {
		var ret string
		return ret
	}
	return *o.Start
}

// GetStartOk returns a tuple with the Start field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SessionInfo) GetStartOk() (*string, bool) {
	if o == nil || IsNil(o.Start) {
		return nil, false
	}
	return o.Start, true
}

// HasStart returns a boolean if a field has been set.
func (o *SessionInfo) HasStart() bool {
	if o != nil && !IsNil(o.Start) {
		return true
	}

	return false
}

// SetStart gets a reference to the given string and assigns it to the Start field.
func (o *SessionInfo) SetStart(v string) {
	o.Start = &v
}

// GetEnd returns the End field value if set, zero value otherwise.
func (o *SessionInfo) GetEnd() string {
	if o == nil || IsNil(o.End) {
		var ret string
		return ret
	}
	return *o.End
}

// GetEndOk returns a tuple with the End field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SessionInfo) GetEndOk() (*string, bool) {
	if o == nil || IsNil(o.End) {
		return nil, false
	}
	return o.End, true
}

// HasEnd returns a boolean if a field has been set.
func (o *SessionInfo) HasEnd() bool {
	if o != nil && !IsNil(o.End) {
		return true
	}

	return false
}

// SetEnd gets a reference to the given string and assigns it to the End field.
func (o *SessionInfo) SetEnd(v string) {
	o.End = &v
}

// GetIp returns the Ip field value if set, zero value otherwise.
func (o *SessionInfo) GetIp() string {
	if o == nil || IsNil(o.Ip) {
		var ret string
		return ret
	}
	return *o.Ip
}

// GetIpOk returns a tuple with the Ip field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SessionInfo) GetIpOk() (*string, bool) {
	if o == nil || IsNil(o.Ip) {
		return nil, false
	}
	return o.Ip, true
}

// HasIp returns a boolean if a field has been set.
func (o *SessionInfo) HasIp() bool {
	if o != nil && !IsNil(o.Ip) {
		return true
	}

	return false
}

// SetIp gets a reference to the given string and assigns it to the Ip field.
func (o *SessionInfo) SetIp(v string) {
	o.Ip = &v
}

// GetLocation returns the Location field value if set, zero value otherwise.
func (o *SessionInfo) GetLocation() string {
	if o == nil || IsNil(o.Location) {
		var ret string
		return ret
	}
	return *o.Location
}

// GetLocationOk returns a tuple with the Location field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SessionInfo) GetLocationOk() (*string, bool) {
	if o == nil || IsNil(o.Location) {
		return nil, false
	}
	return o.Location, true
}

// HasLocation returns a boolean if a field has been set.
func (o *SessionInfo) HasLocation() bool {
	if o != nil && !IsNil(o.Location) {
		return true
	}

	return false
}

// SetLocation gets a reference to the given string and assigns it to the Location field.
func (o *SessionInfo) SetLocation(v string) {
	o.Location = &v
}

// GetPlatform returns the Platform field value if set, zero value otherwise.
func (o *SessionInfo) GetPlatform() string {
	if o == nil || IsNil(o.Platform) {
		var ret string
		return ret
	}
	return *o.Platform
}

// GetPlatformOk returns a tuple with the Platform field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SessionInfo) GetPlatformOk() (*string, bool) {
	if o == nil || IsNil(o.Platform) {
		return nil, false
	}
	return o.Platform, true
}

// HasPlatform returns a boolean if a field has been set.
func (o *SessionInfo) HasPlatform() bool {
	if o != nil && !IsNil(o.Platform) {
		return true
	}

	return false
}

// SetPlatform gets a reference to the given string and assigns it to the Platform field.
func (o *SessionInfo) SetPlatform(v string) {
	o.Platform = &v
}

// GetBrowser returns the Browser field value if set, zero value otherwise.
func (o *SessionInfo) GetBrowser() string {
	if o == nil || IsNil(o.Browser) {
		var ret string
		return ret
	}
	return *o.Browser
}

// GetBrowserOk returns a tuple with the Browser field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SessionInfo) GetBrowserOk() (*string, bool) {
	if o == nil || IsNil(o.Browser) {
		return nil, false
	}
	return o.Browser, true
}

// HasBrowser returns a boolean if a field has been set.
func (o *SessionInfo) HasBrowser() bool {
	if o != nil && !IsNil(o.Browser) {
		return true
	}

	return false
}

// SetBrowser gets a reference to the given string and assigns it to the Browser field.
func (o *SessionInfo) SetBrowser(v string) {
	o.Browser = &v
}

// GetDevice returns the Device field value if set, zero value otherwise.
func (o *SessionInfo) GetDevice() SessionInfoType {
	if o == nil || IsNil(o.Device) {
		var ret SessionInfoType
		return ret
	}
	return *o.Device
}

// GetDeviceOk returns a tuple with the Device field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SessionInfo) GetDeviceOk() (*SessionInfoType, bool) {
	if o == nil || IsNil(o.Device) {
		return nil, false
	}
	return o.Device, true
}

// HasDevice returns a boolean if a field has been set.
func (o *SessionInfo) HasDevice() bool {
	if o != nil && !IsNil(o.Device) {
		return true
	}

	return false
}

// SetDevice gets a reference to the given SessionInfoType and assigns it to the Device field.
func (o *SessionInfo) SetDevice(v SessionInfoType) {
	o.Device = &v
}

// GetCurrentSession returns the CurrentSession field value if set, zero value otherwise.
func (o *SessionInfo) GetCurrentSession() bool {
	if o == nil || IsNil(o.CurrentSession) {
		var ret bool
		return ret
	}
	return *o.CurrentSession
}

// GetCurrentSessionOk returns a tuple with the CurrentSession field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SessionInfo) GetCurrentSessionOk() (*bool, bool) {
	if o == nil || IsNil(o.CurrentSession) {
		return nil, false
	}
	return o.CurrentSession, true
}

// HasCurrentSession returns a boolean if a field has been set.
func (o *SessionInfo) HasCurrentSession() bool {
	if o != nil && !IsNil(o.CurrentSession) {
		return true
	}

	return false
}

// SetCurrentSession gets a reference to the given bool and assigns it to the CurrentSession field.
func (o *SessionInfo) SetCurrentSession(v bool) {
	o.CurrentSession = &v
}

// GetActive returns the Active field value if set, zero value otherwise.
func (o *SessionInfo) GetActive() bool {
	if o == nil || IsNil(o.Active) {
		var ret bool
		return ret
	}
	return *o.Active
}

// GetActiveOk returns a tuple with the Active field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *SessionInfo) GetActiveOk() (*bool, bool) {
	if o == nil || IsNil(o.Active) {
		return nil, false
	}
	return o.Active, true
}

// HasActive returns a boolean if a field has been set.
func (o *SessionInfo) HasActive() bool {
	if o != nil && !IsNil(o.Active) {
		return true
	}

	return false
}

// SetActive gets a reference to the given bool and assigns it to the Active field.
func (o *SessionInfo) SetActive(v bool) {
	o.Active = &v
}

func (o SessionInfo) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o SessionInfo) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Start) {
		toSerialize["start"] = o.Start
	}
	if !IsNil(o.End) {
		toSerialize["end"] = o.End
	}
	if !IsNil(o.Ip) {
		toSerialize["ip"] = o.Ip
	}
	if !IsNil(o.Location) {
		toSerialize["location"] = o.Location
	}
	if !IsNil(o.Platform) {
		toSerialize["platform"] = o.Platform
	}
	if !IsNil(o.Browser) {
		toSerialize["browser"] = o.Browser
	}
	if !IsNil(o.Device) {
		toSerialize["device"] = o.Device
	}
	if !IsNil(o.CurrentSession) {
		toSerialize["currentSession"] = o.CurrentSession
	}
	if !IsNil(o.Active) {
		toSerialize["active"] = o.Active
	}
	return toSerialize, nil
}

type NullableSessionInfo struct {
	value *SessionInfo
	isSet bool
}

func (v NullableSessionInfo) Get() *SessionInfo {
	return v.value
}

func (v *NullableSessionInfo) Set(val *SessionInfo) {
	v.value = val
	v.isSet = true
}

func (v NullableSessionInfo) IsSet() bool {
	return v.isSet
}

func (v *NullableSessionInfo) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSessionInfo(val *SessionInfo) *NullableSessionInfo {
	return &NullableSessionInfo{value: val, isSet: true}
}

func (v NullableSessionInfo) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSessionInfo) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


